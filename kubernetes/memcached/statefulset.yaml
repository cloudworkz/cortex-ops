apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9106"
    prometheus.io/scrape: "true"
  labels:
    app: memcached
  name: memcached
  namespace: monitoring
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: memcached
  serviceName: memcached
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: memcached
    spec:
      containers:
      - command:
        - memcached
        - -m 64
        - -o
        - modern
        - -v
        image: memcached:1.5.12-alpine
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: memcache
          timeoutSeconds: 5
        name: memcached
        ports:
        - containerPort: 11211
          name: memcache
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: memcache
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 1Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - image: quay.io/prometheus/memcached-exporter:v0.5.0
        imagePullPolicy: IfNotPresent
        name: exporter
        ports:
        - containerPort: 9106
          name: exporter
          protocol: TCP
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 64Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      nodeSelector:
        cloud.google.com/gke-nodepool: default
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: RollingUpdate